name: Release

on:
  push:
    branches:
      - build/release
  create:
    tags:
      - v*

jobs:
  release:
    name: Release
    runs-on: macos-latest
    steps:
      - name: Configuration
        id: env_config
        run: |
          echo ::set-output name=GORELEASER_COMMAND::$([[ $GITHUB_REF =~ "refs/tags" ]] && echo "release" || echo "build")
          echo ::set-output name=GORELEASER_DRYRUN::$([[ $GITHUB_REF =~ "refs/tags" ]] && echo "" || echo "--snapshot")
          echo ::set-output name=GORELEASER_VERSION::$([[ $GITHUB_REF =~ "refs/tags" ]] && echo ${GITHUB_REF#refs/tags/} || echo "${GITHUB_SHA:0:7}")

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Check out code
        uses: actions/checkout@v2
        with:
          # Required for GoReleaser CHANGELOG to be defined
          fetch-depth: 0

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-1.15-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-1.15-go-

      - name: Run Unit tests.
        run: go test ./...

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: ${{ steps.env_config.outputs.GORELEASER_VERSION }}
          args: ${{ steps.env_config.outputs.GORELEASER_DRYRUN }} --rm-dist ${{ steps.env_config.outputs.GORELEASER_COMMAND }}

      # - name: Sign the mac binaries with Gon
      #   env:

      #   run: |
      #     ./sign.sh
      # - name: Zip up release directory
      #   run: |
      #     zip -r release-binaries.zip release/
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false

      # - name: Upload release binaries Zip
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: release-binaries.zip
      #     asset_name: release-binaries.zip
      #     asset_content_type: application/zip

# echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u USERNAME --password-stdin
#         echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u USERNAME --password-stdin
#         echo ${{ secrets.docker_hub_token }} | docker login -u ${{ secrets.docker_hub_username }} --password-stdin
#         docker image tag docker.pkg.github.com/dfuse-io/dfuse-eosio/dfuse-eosio:latest dfuse/dfuse-eosio:latest
#         docker image tag docker.pkg.github.com/dfuse-io/dfuse-eosio/dfuse-eosio:latest dfuse/dfuse-eosio:${{ steps.branch_name.outputs.VERSION }}
#         docker build . -t docker.pkg.github.com/dfuse-io/dfuse-eosio/dfuse-eosio:latest -t docker.pkg.github.com/dfuse-io/dfuse-eosio/dfuse-eosio:${{ steps.branch_name.outputs.VERSION }}
#         docker push       docker.pkg.github.com/dfuse-io/dfuse-eosio/dfuse-eosio:latest
