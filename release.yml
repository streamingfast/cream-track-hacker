name: Release

on:
  push:
    branches:
      - build/release
  create:
    tags:
      - v*

jobs:
  release:
    name: Release
    runs-on: macos-latest
    steps:
      - name: Configuration
        id: env_config
        run: |
          echo ::set-output name=GORELEASER_COMMAND::$([[ $GITHUB_REF =~ "refs/tags" ]] && echo "release" || echo "build")
          echo ::set-output name=GORELEASER_DRYRUN::$([[ $GITHUB_REF =~ "refs/tags" ]] && echo "" || echo "--snapshot")

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Check out code
        uses: actions/checkout@v2
        with:
          # Required for GoReleaser CHANGELOG to be defined
          fetch-depth: 0

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-1.15-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-1.15-go-

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Run Unit tests.
        run: go test ./...

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        with:
          version: latest
          args: ${{ steps.env_config.outputs.GORELEASER_COMMAND }} ${{ steps.env_config.outputs.GORELEASER_DRYRUN }} --rm-dist
